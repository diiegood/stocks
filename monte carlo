import numpy as np
import matplotlib.pyplot as plt

# Datos de entrada
retornos = t["return_close"]
mu = np.mean(retornos)
sigma = np.std(retornos) * np.sqrt(252)

print(f"Retorno esperado (mu): {mu:.5f}")
print(f"Volatilidad (sigma): {sigma:.5f}")

S0 = t['close'].iloc[-1]  # Último precio ajustado
T = 10 / 252  # n días, convertido a años
n_steps = 100  # Número de pasos en la simulación
n_simulations = 1000  # Número de simulaciones

dt = T / n_steps

# Simulación de las trayectorias de precios
price_paths = np.zeros((n_steps + 1, n_simulations))
price_paths[0] = S0

for i in range(1, n_steps + 1):
    Z = np.random.standard_normal(n_simulations)
    price_paths[i] = price_paths[i - 1] * np.exp((mu - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * Z)

# Precios al final del periodo simulado
final_prices = price_paths[-1]

# Estadísticas adicionales
mean_final_price = np.mean(final_prices)
std_final_price = np.std(final_prices)
p85 = np.percentile(final_prices, 85)
p30 = np.percentile(final_prices, 30)
p15 = np.percentile(final_prices, 15)

# Cálculo del intervalo de confianza
ci_lower = np.percentile(final_prices, 2.0)
ci_upper = np.percentile(final_prices, 95.0)

# Cálculo del precio probable (mediana)
precio_median = np.median(final_prices)

# Cálculo de la probabilidad de alcanzar un precio objetivo
precio_objetivo = 98
probabilidad = np.mean(final_prices >= precio_objetivo)

# Imprimir resultados
print(f"Precio probable (mediana): {precio_median:.2f}")
print(f"Media de precios finales: {mean_final_price:.2f}")
print(f"Desviación estándar de precios finales: {std_final_price:.2f}")
print(f"Percentil 85: {p85:.2f}")
print(f"Percentil 30: {p30:.2f}")
print(f"Percentil 15: {p15:.2f}")
print(f"Intervalo de confianza al 99%: [{ci_lower:.2f}, {ci_upper:.2f}]")
print(f"Probabilidad de alcanzar el precio objetivo de {precio_objetivo}: {probabilidad:.2%}")

# Gráfico de las trayectorias simuladas
plt.style.use('dark_background')
plt.figure(figsize=(20, 12))
for i in range(n_simulations):
    plt.plot(price_paths[:, i], lw=1.5, alpha=0.1)

# Líneas de referencia
plt.axhline(ci_lower, color='red', linestyle='--', label='IC 1% Inferior')
plt.axhline(ci_upper, color='green', linestyle='--', label='IC 1% Superior')
plt.axhline(p85, color='orange', linestyle='--', label='Percentil 85')
plt.axhline(p30, color='cyan', linestyle='--', label='Percentil 30')
plt.axhline(p15, color='magenta', linestyle='--', label='Percentil 15')

# Personalización
plt.title("Simulación de Precios de " + ticker + " con GBM a 10 días")
plt.xlabel('Tiempo (días)')
plt.ylabel('Precio del Activo')
plt.legend()
plt.grid(True)
plt.show()
